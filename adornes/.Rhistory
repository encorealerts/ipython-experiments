2*(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
> 2*(1-pnorm(xbar,mean=a,sd=s/sqrt(20)))
2*(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
d <- c(-5, -4,-3,-2,1,7,10,11,17,18, -11, -5, -3, -3, -1, -1, -1, 2, 3, 5, 12)
sample_diffs <- rep(NA, 100)
for(i in 1:100){
calcium <- sample(d, 10)
placebo <- d[-calcium]
sample_diffs[i] <- median(calcium) - median(placebo)
}
hist(sample_diffs)
d <- c(-5, -4,-3,-2,1,7,10,11,17,18, -11, -5, -3, -3, -1, -1, -1, 2, 3, 5, 12)
sample_diffs <- rep(NA, 100)
for(i in 1:100){
calcium <- sample(d, 10)
placebo <- d[-calcium]
sample_diffs[i] <- median(calcium) - median(placebo)
}
hist(sample_diffs)
c(1,2,3) - c(2,3)
diff(c(1,2,3), c(2,3))
sub(c(1,2,3), c(2,3))
d <- c(-5, -4,-3,-2,1,7,10,11,17,18, -11, -5, -3, -3, -1, -1, -1, 2, 3, 5, 12)
sample_diffs <- rep(NA, 100)
for(i in 1:100){
calcium <- sample(d, 10)
placebo <- sample(d, 11)
sample_diffs[i] <- median(calcium) - median(placebo)
}
hist(sample_diffs)
sd(sample_diffs)
d <- c(-5, -4,-3,-2,1,7,10,11,17,18, -11, -5, -3, -3, -1, -1, -1, 2, 3, 5, 12)
sample_diffs <- rep(NA, 1000)
for(i in 1:1000){
calcium <- sample(d, 10)
placebo <- sample(d, 11)
sample_diffs[i] <- median(calcium) - median(placebo)
}
sd(sample_diffs)
hist(sample_diffs)
d <- c(-5, -4,-3,-2,1,7,10,11,17,18, -11, -5, -3, -3, -1, -1, -1, 2, 3, 5, 12)
sample_diffs <- rep(NA, 10000)
for(i in 1:10000){
calcium <- sample(d, 10)
placebo <- sample(d, 11)
sample_diffs[i] <- median(calcium) - median(placebo)
}
sd(sample_diffs)
hist(sample_diffs)
sd(sample_diffs)
mean(sample_diffs)
a <- 0.11675
s <- 2.8593
n <- 21
xbar <- 5
2*(1-pnorm(xbar,mean=a,sd=s/sqrt(n)))
zstar = qnorm(.8)
sigma = 18
E = 4
zstar^2 ∗ sigma^2/ E^2
zstar^2 * sigma^2/ E^2
zstar = qnorm(.9)
sigma = 18
E = 4
zstar^2 * sigma^2/ E^2
zstar = qnorm(.9)
sigma = 18
E = 2
zstar^2 * sigma^2/ E^2
zstar = qnorm(.9)
sigma = 18
E = 8
zstar^2 * sigma^2/ E^2
zstar = qnorm(.9)
sigma = 18
E = 2
zstar^2 * sigma^2/ E^2
zstar = qnorm(.95)
sigma = 18
E = 0.04
zstar^2 * sigma^2/ E^2
zstar = qnorm(.9)
sigma = 18
E = 4
zstar^2 * sigma^2/ E^2
zstar = qnorm(.99)
sigma = 18
E = 4
zstar^2 * sigma^2/ E^2
pt(2.24, 21)
2* pt(2.24, 21, lower.tail = F)
pt(0.5, 17, lower.tail = F)
(1/1 + 2/2)/5
(1/2 + 2/5 + 3/10)/5
6/25
1/20
2/10
0.5/4
7/20
1/8
(1/8+2/9+3/10)
(1/8 + 2/9 + 3/10)
(1/8) + (2/9) + (3/10)
11/20
2/10
12/20
3/10
13/20
5/10
15/20
7/10
17/20
9/10
19/20
9/10
18/20
1/16 + 1/16
1/32
1/8 + 1/8
1/8 + 1/16
(1/8 + 1/8 + 1/8)
(3/8)
(1/8 + 1/8) * 1/8
(1/8 + 1/8) * (1/8+1/8)
(2/8) *(2/8)
1/16
p1 = 144/71
p2 = 244/389
SE <- sqrt((p1*(1-p1))/n1)+(p2*(1-p2))/n2))
SE <- sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
n1 = 71
n2 = 389
p1 = 144/n1
p2 = 244/n2
SE <- sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
n1 = 144
n2 = 389
p1 = 71/n1
p2 = 244/n2
SE <- sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
n1 = 1037
n2 = 1028
p1 = 493/n1
p2 = 596/n2
SE <- sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
?rnorm
a <- rnorm(100, mean=2000, sd = 200)
a = a/0.09
sd(a)
a <- rnorm(100, mean=2000, sd = 200)
b = a/0.09
sd(b)
sqrt(0.72)
sqrt(0.72)*2
sqrt(0.72)^2
64.68 - 0.62*81.4
(64.68 - 0.62*81.4) - 13.1
47.49 - 0.54
47.49 - 0.54*0.95
(47.49 - 0.54*0.95)-(47.49 - 0.54)
install.packages("DAAG")
library(DAAG)
data(allbacks)
book_mlr <- lm(weight ~ volume + cover, data = allbaxks)
book_mlr <- lm(weight ~ volume + cover, data = allbacks)
summary(book_mlr)
data1 <- read.csv("http://d396qusza40orc.cloudfront.net/statistics/lec_resources/states.csv")
states = data1
rm(data1)
pov_slr <- lm(poverty ~ female_house, data = states)
summary(pov_slr)
pov_slr <- lm(poverty ~ female_house + white, data = states)
summary(pov_slr)
anova(pov_mlr)
pov_mlr <- lm(poverty ~ female_house + white, data = states)
summary(pov_mlr)
anova(pov_mlr)
c(65,75, 80) * 22 * 8
c(65,75, 80) * 22 * 9
76 + (0.35*72) + (0.43*30)
11 + 12 + 13 + 14 + 12 + 12 + 10
84/88
84/88*3
(84/88*3) + 20
(84/88*3) + 2
8 - (84/88*3) - 2
c(65, 75, 85) * 8 * 22
c(65, 75, 85) * 8 * 22 * 0.7 - 1500
c(65, 75, 85) * 8 * 22 * 0.85 - 1500
50 * 8 * 7 + 65 * 8 * 15
55 * 8 * 22
56 * 8 * 22
57 * 8 * 22
60 * 8 * 22
50 * 8 * 22
50 * 8 * 22 * 0.7
50 * 8 * 22 * 0.7 - 1000
60 * 8 * 22 * 0.7 - 1000
60 * 8 * 22 * 0.7
60 * 7 * 22 * 0.7
60 * 7 * 22 * 0.7 - 1000
65 * 8 * 22
65 * 8 * 22 * 0.7 - 1500
65 * 8 * 22 * 0.7 - 1000
50 * 9 * 24
50 * 9 * 24 * 0.7
65 * 9 * 24 * 0.7
8000 * 0.7
8000 * 0.77
8000 * 0.75
55 * 9 * 24 * 0.7
65 * 10 * 24 * 0.7
50 * 9 * 22 * 0.7
50 * 9 * 24 * 0.7
50 * 10 * 24 * 0.7
50 * 10 * 22 * 0.7
50 * 10 * 22 * 0.7 - 1500
50 * 8 * 22 * 0.7 - 1500
50 * 8 * 22 * 0.7 - 1000
50 * 9 * 22 * 0.7 - 1000
50 * 10 * 22 * 0.7 - 1000
65 * 10 * 22 * 0.7 - 1000
55 * 10 * 22 * 0.7 - 1000
library(dplyr)
install.packages("dplyr")
51^2 + 49
0.51^2 + 0.49
0.51^2 * 0.49
(0.51^2 * 0.49) * 3
choose(3, 2)
choose(2, 3)
choose(3, 2)
choose(8, 7)
choose(8, 6)
choose(8, 7)
p.I.GG <- 0.5 * 0.3 / (0.5 * 0.3 + 0.7 * 0.25)
(71 + 224)/(144+389)
phat = (71 + 224)/(144+389)
phatcomp = 1 - phat
phat.phatcomp = phat * phatcomp
sqrt(phat.phatcomp/144 + phat.phatcomop/389)
sqrt(phat.phatcomp/144 + phat.phatcomp/389)
0.06/sqrt(50)
0.36*0.64/50
sqrt(0.36*0.64/50)
sqrt(0.3*0.7/50)
sqrt(4 + 9)
4*sqrt(41)
3/(4*sqrt(41))
df <- data.frame(c(7.0, 6.4, 6.9, 5.5, 6.5), c(3.2, 3.2, 3.1, 2.3, 2.8))
df
df <- data.frame(c(7.0, 6.4, 6.9, 5.5, 6.5), c(3.2, 3.2, 3.1, 2.3, 2.8), row.names = c("length", "width"))
df <- data.frame(length = c(7.0, 6.4, 6.9, 5.5, 6.5), width = c(3.2, 3.2, 3.1, 2.3, 2.8))
df
df$length
cor(df$length, df$width)
install.packages("spark")
?spark
??spark
sqrt((5.6-4.9)^2+(0.5)^2+(2.5)^2+(0.9)^2)
(sqrt(6)+sqrt(7))/4
(sqrt(6+7))/4
4/(sqrt(6)*sqrt(7))/4
4/(sqrt(6)*sqrt(7))
cor(c(7.0, 6.4, 6.9, 5.5, 6.5), c(3.2, 3.2, 3.1, 2.3, 2.8))
cor(c(6.9,6.7,6.9, 5.8, 6.8), c(3.1, 3.1, 3.1, 2.7, 3.2))
choose(4, 2)
24/8
?pbinom
pbinom(20, 3, 0.4)
pbinom(3, 20, 0.4)
pbinom(3, 20, 0.5)
rbinom(3, 20, 0.5)
pbinom(3, 20, 0.4)
choose(4,2)
choose(4,2)* (0.4^2) * (0.6^2)
pbinom(2, 4, 0.4)
pbinom(2, 4, 0.4, lower.tail = T)
pbinom(2, 4, 0.4, lower.tail = F)
pbinom(2, 4, 0.4, lower.tail = F) * 2
pnorm(60, mean = 65, sd = 5)
pnorm(60, mean = 65, sd = 5, lower.tail = F)
pnorm(60, mean = 65, sd = 5, lower.tail = T)
n <- 0.5 * 0.5 * 1.96^2 / 0.04^2
?floor
n <- ceiling(0.5 * 0.5 * 1.96^2 / 0.04^2)
sample.size.for.sample.proportion = function(p=0.5, z = 1.96, M){
return ceiling(p * (1-p) * z^2 / M^2)
}
sample.size.for.sample.proportion <- function(p=0.5, z = 1.96, M){
return(ceiling(p * (1-p) * z^2 / M^2))
}
sample.size.for.sample.proportion(M=0.04)
?confint
se.proportion <- function(sstat, z=1.96, p=0.5, n){
return(sqrt(p*(1-p)/n))
}
standard.error.proportion <- function(sstat, z=1.96, p=0.5, n){
return(sqrt(p*(1-p)/n))
}
standard.error.proportion(sstat=0.499, n=1356, p=0.499)
standard.error.proportion(sstat=0.499, n=1356, p=0.499, z=2)
sample.size.for.sample.mean <- function(S, z = 1.96, M){
return(ceiling(z^2 * S^2/ M^2))
}
standard.error.mean <- function(s, n){
return(s/sqrt(n))
}
standard.error.mean(s=1.572, n=22)
sample.size.for.sample.proportion <- function(p=0.5, z = 1.96, M){
return(ceiling(p * (1-p) * z^2 / M^2))
}
standard.error.proportion <- function(p=0.5, n){
return(sqrt(p*(1-p)/n))
}
sample.size.for.sample.mean <- function(S, z = 1.96, M){
return(ceiling(z^2 * S^2/ M^2))
}
standard.error.mean <- function(s, n){
return(s/sqrt(n))
}
confidence.interval <- function(sstat, z=1.96, S){
return(sstat + c(-1,1) * (z*S))
}
confidence.interval(sstat=5.77, z=2.58, standard.error.proportion(p=0.64, n=1168))
confidence.interval(sstat=5.77, z=2, standard.error.proportion(p=0.64, n=1168))
confidence.interval(sstat=0.64, z=2, standard.error.proportion(p=0.64, n=1168))
standard.error.proportion(p=0.4, n=129)
(0.287-0.4)/standard.error.proportion(p=0.4, n=129)
?t.test
?pnorm
require(graphics)
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
rm(list=ls())
sample.size.for.sample.proportion <- function(p=0.5, z = 1.96, M){
return(ceiling(p * (1-p) * z^2 / M^2))
}
standard.error.proportion <- function(p=0.5, n){
return(sqrt(p*(1-p)/n))
}
sample.size.for.sample.mean <- function(S, z = 1.96, M){
return(ceiling(z^2 * S^2/ M^2))
}
standard.error.mean <- function(s, n){
return(s/sqrt(n))
}
confidence.interval <- function(sstat, z=1.96, S){
return(sstat + c(-1,1) * (z*S))
}
?t.test
standard.error.two.unpaired.means <- function(s1, s2, n1, n2){
return(sqrt((s1^2)/n1 + (s2^2)/n2))
}
standard.error.two.unpaired.means(47.7, 22.3, 28, 30)
(253.9−193.1)/standard.error.two.unpaired.means(47.7, 22.3, 28, 30)
(253.9 - 193.1)/standard.error.two.unpaired.means(47.7, 22.3, 28, 30)
standard.error.two.unpaired.means <- function(s1, s2, n1, n2){
return(sqrt((s1^2)/n1 + (s2^2)/n2))
}
tstat.two.unpaired.means <- function(u1, u2, s1, s2, n1, n2){
return((u1-u2)/standard.error.two.unpaired.means <- function(s1, s2, n1, n2))
}
tstat.two.unpaired.means <- function(u1, u2, s1, s2, n1, n2){
return((u1-u2)/standard.error.two.unpaired.means(s1, s2, n1, n2))
}
tstat.two.unpaired.means(253.9, 193.1, 47.7, 22.3, 28, 30)
standard.error.two.proportions <- function(p1, p2, n1, n2){
return(sqrt(p1*(1-p1)/n1 + p2*(1-p2)/n2))
}
tstat.two.proportions <- function(p1, p2, n1, n2){
return((p1-p2)/standard.error.two.proportions(p1, p2, n1, n2))
}
tstat.two.proportions(0.7371, 0.5377, 251, 199)
tstat.mean <- function(u1, u0, s, n){
return((u1 - u0)/standard.error.mean(s, n))
}
zstat.proportion <- function(p1, p0, s, n){
return((p1 - p0)/standard.error.proportion(p0, n))
}
zstat.proportion <- function(p1, p0, n){
return((p1 - p0)/standard.error.proportion(p0, n))
}
zstat.proportion(0.287, 0.4, 129)
qnorm(0.95)
qnorm(0.90)
qnorm(0.90,lower.tail = F)
qnorm(0.90,lower.tail = T)
2*qnorm(0.95)
qnorm(0.95)
qqnorm(0.95)
confidence.interval(500, z = 1.86, 220)
confidence.interval(500, z = 1.86, standard.error.mean(220, 100))
confidence.interval(500, z = 1.65, standard.error.mean(220, 100))
confidence.interval(415, z = 1.65, standard.error.mean(s=220, n=100))
confidence.interval(415, z = 1.86, standard.error.mean(s=220, n=100))
confidence.interval(500, z = 1.86, standard.error.mean(s=220, n=100))
confidence.interval(415, z = 1.86, standard.error.mean(s=220, n=100))
qnorm(0.95)
qnorm(0.95, lower.tail = F)
?anova
sample.size.for.sample.proportion(p=0.11, M = 100)
0.88^4
1.627/2
standard.error.proportion(p=0.24, 3226)
standard.error.proportion(p=0.2, 3226)
0.8333 * 40 + 0.9487 * 30 + 0.6667 * 30
0.8333 * 30 + 0.9487 * 20 + 0.6667 * 20 + 15
0.86 * 30 + 0.97 * 20 + 0.8 * 20 + 15
0.96 * 30 + 0.97 * 20 + 0.9 * 20 + 15
rm(list=ls())
var(-4, 5, 14)
var(c(-4, 5, 14))
sd(c(-4, 5, 14))
sd(c(-1, 0, 1))
mean(c(-4, 5, 14))
setwd("~/desenv/workspace_encore/ipython-experiments/adornes")
actors <- read.csv("../../s3/2015-05-21-01-00-00-actors.csv", header = F, sep = ",")
head(actors)
actors_cols_names <- c("id", "name", "screen_name", "location", "lang",
"favourites_count", "statuses_count", "friends_count",
"summary", "created_at", "updated_at", "followers_count",
"link", "listed_count", "source", "native_id", "image")
names(actors) <- actors_cols_names
actors[, c("location", "lang", "favourites_count", "statuses_count",
"friends_count", "summary", "followers_count", "listed_count", "native_id")]
actors <- actors[, c("location", "lang", "favourites_count", "statuses_count",
"friends_count", "summary", "followers_count", "listed_count", "native_id")]
write.table(x = actors, file="../../s3/actors.csv")
write.csv(x = actors, file="../../s3/actors.csv")
actors <- read.csv("../../s3/2015-05-21-01-00-00-actors.csv", header = F, sep = ",")
names(actors) <- actors_cols_names
actors <- actors[, c("id","location", "lang", "favourites_count", "statuses_count",
"friends_count", "summary", "followers_count", "listed_count", "native_id")]
write.csv(x = actors, file="../../s3/actors.csv")
actors2 <- actors[, c("id","lang", "favourites_count", "statuses_count",
"friends_count", "followers_count", "listed_count", "native_id")]
write.csv(x = actors2, file="../../s3/actors.csv")
actors2$id
summary(actors2$id)
actors <- read.csv("../../s3/2015-05-21-01-00-00-actors.csv", header = F, sep = ",")
actors[,1]
summary(actors[,1])
activities <- read.csv("../../s3/2015-05-21-01-00-00-activities.csv", header = F, sep = ",")
summary(activities$actor_id)
activities$actor_id
col.names <- c("id", "body", "country", "country_code", "place_type",
"sub_region", "actor_id", "source", "share_count",
"in_reply_to_native_id", "created_at", "updated_at",
"klout", "native_id", "verb", "latitude", "longitude",
"sharing_activity_native_id", "region", "favorites_count",
"replies_count", "in_reply_to_screen_name", "link")
names(activities) <- col.names
summary(activities$actor_id)
activities$actor_id
actors_cols_names <- c("id", "name", "screen_name", "location", "lang",
"favourites_count", "statuses_count", "friends_count",
"summary", "created_at", "updated_at", "followers_count",
"link", "listed_count", "source", "native_id", "image")
names(actors) <- actors_cols_names
summary(actors$id)
actors3 <- read.csv("../../s3/2015-05-21-01-00-00-actors.csv", header = F, sep = ",", fill = T)
summary(actors3$id)
summary(actors3[,1])
summary(actors3[1:100,1])
summary(actors3[1:1000,1])
summary(actors3[1:10000,1])
summary(actors3[1:5000,1])
summary(actors3[1:2000,1])
summary(actors3[1:3000,1])
summary(actors3[1:4000,1])
summary(actors3[1:4500,1])
summary(actors3[1:4700,1])
summary(actors3[1:4800,1])
summary(actors3[1:4900,1])
summary(actors3[1:4850,1])
summary(actors3[1:4880,1])
summary(actors3[1:4870,1])
summary(actors3[1:4875,1])
actors3[4875:4880,]
actors3[4875:4880,1]
actors3[4876:4880,1]
actors3[4878:4880,1]
actors3[4878,1]
activities$actor_id
distinct(activities$actor_id)
len(unique(activities$actor_id))
length(unique(activities$actor_id))
write.csv(activities$actor_id, "../../s3/actors.csv")
?write.csv
write.csv(activities$actor_id, "../../s3/actors.csv", row.names=F, col.names=F)
